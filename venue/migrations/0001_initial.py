# Generated by Django 2.2.5 on 2019-09-29 13:42

from django.db import migrations, models
import django.db.models.deletion
from django.contrib.gis.geos import Point
from venue.models import *
import csv
import datetime


def import_csv_data(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.

    venue_description_lookup = {
        "Pending": "Venue is pending",
        "Verified": "Venue is verified",
        "Closed:": "Venue is closed"
    }

    venue_status_object_lookup = {}
    for label, description in venue_description_lookup.items():
        venue_status_object_lookup[label] = VenueStatus(label, description)
        venue_status_object_lookup[label].save()

    business_type_description_lookup = {
        "Community Centre": "This business is a Community Centre",
        "Health Centre": "This business is a Health Centre",
        "Youth Club": "This business is a Youth Club",
        "Library": "This business is a Library",
        "GP": "This business is a GP",
        "Public Toilet": "This business is a Public Toilet",
        "Other": "This business is undefined"
    }

    business_type_object_lookup = {}
    for label, description in business_type_description_lookup.items():
        business_type_object_lookup[label] = BusinessType(label, description)
        business_type_object_lookup[label].save()

        # Dictionary to hold unique social media objects.
    social_media_lookup = {}

    def try_date_from_string(string):
        if len(string) > 0:
            return date_from_string(string)
        else:
            return None

    def date_from_string(string):
        parts = string.split(":")
        return datetime.time(int(parts[0]), int(parts[1]))

    def get_social_media_object(website, twitter, facebook):
        social_media_hash = website + twitter + facebook
        if len(social_media_hash) == 0 or social_media_hash not in social_media_lookup.keys():
            social_media = SocialMedia(website, twitter, facebook)
            social_media.save()
            social_media_lookup[social_media_hash] = social_media
            return social_media
        else:
            return social_media_lookup[social_media_hash]

    with open('locations.csv') as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=',')

        for index, row in enumerate(csv_reader):
            # venue
            mon_open = try_date_from_string(row['MON_OPEN'])
            mon_close = try_date_from_string(row['TUE_CLOSE'])
            tue_open = try_date_from_string(row['TUE_OPEN'])
            tue_close = try_date_from_string(row['TUE_CLOSE'])
            wed_open = try_date_from_string(row['WED_OPEN'])
            wed_close = try_date_from_string(row['WED_CLOSE'])
            thu_open = try_date_from_string(row['THU_OPEN'])
            thu_close = try_date_from_string(row['THU_CLOSE'])
            fri_open = try_date_from_string(row['FRI_OPEN'])
            fri_close = try_date_from_string(row['FRI_CLOSE'])
            sat_open = try_date_from_string(row['SAT_OPEN'])
            sat_close = try_date_from_string(row['SAT_CLOSE'])
            sun_open = try_date_from_string(row['SUN_OPEN'])
            sun_close = try_date_from_string(row['SUN_CLOSE'])

            business_type = business_type_object_lookup[row['BUSINESS_TYPE']]
            venue_status = venue_status_object_lookup[row['VENUE_STATUS']]

            website = row['WEBSITE']
            twitter = row['TWITTER']
            facebook = row['FACEBOOK']
            social_media = get_social_media_object(website, twitter, facebook)

            contact1 = Contact(row['PHONE_PRIMARY'], row['EMAIL_PRIMARY'])
            contact1.save()
            contact2 = Contact(row['PHONE_SECONDARY'], row['EMAIL_SECONDARY'])
            contact2.save()

            opening_hours = row['OPENING_HOURS'] == 'True'
            wheelchair_access = row['WHEELCHAIR_ACCESS'] == 'True'
            stock = row['STOCK'] == 'True'
            toilet = row['TOILET'] == 'True'

            coordinates = Point(float(row['LAT']), float(row['LNG']))

            venue = Venue(name=row['NAME'], description=row['DESCRIPTION'], address_line_1=row['ADDRESS1'],
                          address_line_2=row['ADDRESS2'], address_line_3=row['ADDRESS3'], city=row['CITY'],
                          postcode=row['POSTCODE'], country=row['COUNTRY'], coordinates=coordinates,
                          contacts=[
                              contact1, contact2], product_location=row['PRODUCT_LOCATION'],
                          venue_status=venue_status, business_type=business_type, toilet=row[
                              'TOILET'],
                          wheelchair_access=wheelchair_access, opening_hours=opening_hours,
                          monday_open=mon_open, monday_close=mon_close, tuesday_open=tue_open, tuesday_close=tue_close,
                          wednesday_open=wed_open, wednesday_close=wed_close, thursday_open=thu_open,
                          thursday_close=thu_close,
                          friday_open=fri_open, friday_close=fri_close, saturday_open=sat_open,
                          saturday_close=sat_close,
                          sunday_open=sun_open, sunday_close=sun_close, stock=stock)

            venue.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contact', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessType',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('website', models.CharField(max_length=250)),
                ('facebook', models.CharField(max_length=250)),
                ('twitter', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='VenueStatus',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('description', models.CharField(max_length=250)),
                ('address_line_1', models.CharField(max_length=250)),
                ('address_line_2', models.CharField(max_length=250)),
                ('address_line_3', models.CharField(max_length=250)),
                ('city', models.CharField(max_length=250)),
                ('postcode', models.CharField(max_length=10)),
                ('country', models.CharField(max_length=250)),
                ('product_location', models.CharField(max_length=500)),
                ('toilet', models.BooleanField()),
                ('stock', models.BooleanField()),
                ('wheelchair_access', models.BooleanField()),
                ('opening_hours', models.BooleanField()),
                ('monday_open', models.TimeField()),
                ('monday_close', models.TimeField()),
                ('tuesday_open', models.TimeField()),
                ('tuesday_close', models.TimeField()),
                ('wednesday_open', models.TimeField()),
                ('wednesday_close', models.TimeField()),
                ('thursday_open', models.TimeField()),
                ('thursday_close', models.TimeField()),
                ('friday_open', models.TimeField()),
                ('friday_close', models.TimeField()),
                ('saturday_open', models.TimeField()),
                ('saturday_close', models.TimeField()),
                ('sunday_open', models.TimeField()),
                ('sunday_close', models.TimeField()),
                ('business_type', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='venue.BusinessType')),
                ('contact', models.ForeignKey(
                    on_delete=django.db.models.deletion.DO_NOTHING, to='contact.Contact')),
                ('social_media', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='venue.SocialMedia')),
                ('venue_status', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='venue.VenueStatus')),
            ],
        ),
        migrations.RunPython(import_csv_data),
    ]
